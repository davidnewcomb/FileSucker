package uk.co.bigsoft.filesucker.transfer.download;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import uk.co.bigsoft.filesucker.transfer.sucker_type.SuckerType;
import uk.co.bigsoft.filesucker.transfer.sucker_type.SuckerTypeFactory;

public class SuckerIterator implements Iterable<String> {

	private SuckerTypeFactory factory = new SuckerTypeFactory();
	private ArrayList<SuckerType> suckers = new ArrayList<>();
	private int[] currentIndex = new int[0];
	//private List<Integer> currentList;
	private int[] maxIndex = new int[0];
	//private List<Integer> maxList;
	ArrayList<int[]> things = new ArrayList<>();
	
	public SuckerIterator(String url) {
		
		Pattern p = Pattern.compile("\\{[^}]*\\}");
		Matcher matcher = p.matcher(url);
		
		int pos = 0;
		
		while (matcher.find()) {
			
			int start = matcher.start();
			int end = matcher.end();
			
			if (pos != start) {
				String chunk = url.substring(pos, start);
				suckers.add(factory.create(chunk));
				pos = end;
			}
			suckers.add(factory.create(matcher.group()));
		}
		
		if (pos < url.length()-1) {
			String chunk = url.substring(pos, url.length());
			suckers.add(factory.create(chunk));
		}
		
		currentIndex = suckers.stream().mapToInt(s -> 0).toArray();
		//currentIndex[0] = -1;
		maxIndex = suckers.stream().mapToInt(s -> s.getList().size()).toArray();
		
		things.add(currentIndex);
		
		out(currentIndex);
		
		while (true) {
			currentIndex = nextCurrent(0, currentIndex, maxIndex);
			out(currentIndex);
			if (currentIndex.length == 0) {
				break;
			}
			things.add(currentIndex);
		}
		for (int[] i : things) {
			out(i);
		}
		System.out.println("");
	}


	public static void main(String[] args) {
		//String url = "https://images.nubilefilms.com/videos/kamasutra_with_sydney_cole/photos/{N,69,1,16,1}.jpg";
		String url = "https://images.nubilefilms.com/{C,69}/kamasutra_with_sydney_cole/photos/{N,69,1,16,1}.jpg";
		SuckerIterator si = new SuckerIterator(url);
		System.out.println("Size= " + si.size());
		for (String s : si) {
			System.out.println(s);
		}
		
//		int[] c = {0,0,-1};
//		int[] m = {0,0,0};
//		
//		while (true) {
//			c = nextCurrent(0, c, m);
//			if (c.length == 0) {
//				break;
//			}
//			out(c);
//		}

	}
	
//	public static void main2(String[] args) {
//		int[] c = {0,0,-1};
//		int[] m = {0,0,0};
//		
//		while (true) {
//			c = nextCurrent(0, c, m);
//			if (c.length == 0) {
//				break;
//			}
//			out(c);
//		}
//
//	}
	
	static void out(int[] o) {
		StringBuilder s = new StringBuilder();
		for (int i : o) {
			s.append(i);
			s.append(",");
		}
		System.out.println(s.toString());
	}
	private int[] nextCurrent(int idx, int[] cur, int[] max) {

		int[] copy = cur.clone();
		if (copy[idx] < max[idx]-1) {
			++copy[idx];
			return copy;
		}
		
		boolean finished = true;
		for (int i = 0 ; i <copy.length ; ++i) {
			if (copy[i] != max[i]-1) {
				finished = false;
			}
		}
		if (finished) {
			return new int[0];
		}

		copy[idx] = 0;
		return nextCurrent(++idx, copy, max);
	}

	public int size() {
		return things.size();
	}
	@Override
	public Iterator<String> iterator() {
		return new MyIterator(things);
	}

	class MyIterator implements Iterator<String> {

		private Iterator<int[]> iter;

		public MyIterator(ArrayList<int[]> things) {
			iter = things.iterator();
		}

		@Override
		public boolean hasNext() {
			return iter.hasNext();
		}

		@Override
		public String next() {
			HashMap<Integer, String> map = new HashMap<>();
			
			int[] current = iter.next();
			
			for (int i = 0 ; i < suckers.size() ; ++i) {
				SuckerType st = suckers.get(i);
				String s = st.getList().get(current[i]);
				if (s != null) {
					map.put(Integer.valueOf(st.getId()), s);
				}
			}

			StringBuilder s = new StringBuilder();
			for(SuckerType st : suckers) {
				s.append(map.get(Integer.valueOf(st.getId())));
			}
			return s.toString();
		}
		
	}
}
